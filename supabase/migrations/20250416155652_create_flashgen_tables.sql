-- Migration: create_flashgen_tables
-- Description: Creates the base schema for FlashGen AI including flashcards, generations and error logs
-- Created at: 2025-04-16 15:56:52 UTC
-- Author: Database Schema Migration

-- enable pgcrypto extension for uuid generation
create extension if not exists "pgcrypto";

-- create generations table
create table if not exists public.generations (
  id bigserial primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  model varchar not null,
  generated_count integer not null,
  accepted_unedited_count integer not null,
  accepted_edited_count integer not null,
  source_text_hash varchar not null,
  source_text_length integer not null check (source_text_length between 1000 and 10000),
  created_at timestamp not null default current_timestamp
);

comment on table public.generations is 'Stores information about flashcard generation sessions';
comment on column public.generations.user_id is 'Reference to the user who initiated the generation';
comment on column public.generations.model is 'The AI model used for generation';
comment on column public.generations.generated_count is 'Total count of flashcards generated';
comment on column public.generations.accepted_unedited_count is 'Count of AI flashcards accepted without edits';
comment on column public.generations.accepted_edited_count is 'Count of AI flashcards accepted with edits';
comment on column public.generations.source_text_hash is 'Hash of the source text used for generation';
comment on column public.generations.source_text_length is 'Length of the source text, constrained between 1000-10000 chars';

-- create generation error logs table
create table if not exists public.generation_error_logs (
  id bigserial primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  model varchar not null,
  source_text_hash varchar not null,
  source_text_length integer not null check (source_text_length between 1000 and 10000),
  error_code varchar not null,
  error_message text,
  created_at timestamp not null default current_timestamp
);

comment on table public.generation_error_logs is 'Logs of errors occurring during flashcard generation';
comment on column public.generation_error_logs.user_id is 'Reference to the user who experienced the error';
comment on column public.generation_error_logs.model is 'The AI model that was being used';
comment on column public.generation_error_logs.source_text_hash is 'Hash of the source text that caused the error';
comment on column public.generation_error_logs.source_text_length is 'Length of the source text';
comment on column public.generation_error_logs.error_code is 'Error code returned by the system';
comment on column public.generation_error_logs.error_message is 'Detailed error message';

-- create flashcards table
create table if not exists public.flashcards (
  id bigserial primary key,
  front varchar(200) not null check (length(front) <= 200),
  back varchar(500) not null check (length(back) <= 500),
  source varchar(50) not null check (source in ('ai-full', 'ai-edited', 'manual')),
  generation_id bigint references public.generations(id),
  user_id uuid not null references auth.users(id) on delete cascade,
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp,
  constraint fk_generation foreign key (generation_id) references public.generations(id) on delete set null
);

comment on table public.flashcards is 'Stores flashcards created by users, either manually or generated by AI';
comment on column public.flashcards.front is 'Front side text of the flashcard, limited to 200 characters';
comment on column public.flashcards.back is 'Back side text of the flashcard, limited to 500 characters';
comment on column public.flashcards.source is 'Source of the flashcard: ai-full (unedited AI), ai-edited (edited AI), or manual';
comment on column public.flashcards.generation_id is 'Reference to the generation ID that created this flashcard';
comment on column public.flashcards.user_id is 'Reference to the user who owns this flashcard';

-- create indexes
create index idx_flashcards_user_id on public.flashcards(user_id);
create index idx_flashcards_created_at on public.flashcards(created_at);
create index idx_generations_user_id on public.generations(user_id);
create index idx_generation_error_logs_user_id on public.generation_error_logs(user_id);

-- create trigger for updating updated_at on flashcards
create or replace function public.update_modified_column()
returns trigger as $$
begin
  new.updated_at = current_timestamp;
  return new;
end;
$$ language plpgsql;

create trigger update_flashcards_updated_at
before update on public.flashcards
for each row
execute function public.update_modified_column();

-- enable row level security
alter table public.flashcards enable row level security;
alter table public.generations enable row level security;
alter table public.generation_error_logs enable row level security;

-- create rls policies for flashcards but disabled by default
-- authenticated users can only access their own flashcards
create policy "Authenticated users can view their own flashcards"
on public.flashcards for select
to authenticated
using (auth.uid() = user_id);

create policy "Authenticated users can insert their own flashcards"
on public.flashcards for insert
to authenticated
with check (auth.uid() = user_id);

create policy "Authenticated users can update their own flashcards"
on public.flashcards for update
to authenticated
using (auth.uid() = user_id);

create policy "Authenticated users can delete their own flashcards"
on public.flashcards for delete
to authenticated
using (auth.uid() = user_id);

-- create rls policies for generations but disabled
-- authenticated users can only access their own generations
create policy "Authenticated users can view their own generations"
on public.generations for select
to authenticated
using (auth.uid() = user_id);

create policy "Authenticated users can insert their own generations"
on public.generations for insert
to authenticated
with check (auth.uid() = user_id);

-- create rls policies for generation_error_logs but disabled
-- authenticated users can only access their own error logs
create policy "Authenticated users can view their own error logs"
on public.generation_error_logs for select
to authenticated
using (auth.uid() = user_id);

create policy "Authenticated users can insert their own error logs"
on public.generation_error_logs for insert
to authenticated
with check (auth.uid() = user_id);

-- anon users have no access to any tables (policies disabled)
create policy "Anon users cannot access flashcards"
on public.flashcards for select
to anon
using (false);

create policy "Anon users cannot access generations"
on public.generations for select
to anon
using (false);

create policy "Anon users cannot access error logs"
on public.generation_error_logs for select
to anon
using (false); 